---
substitutions:
  device_name: slimmelezer
    
esphome:
  name: ${device_name}
  platform: ESP8266
  esp8266_restore_from_flash: true
  board: d1_mini
  name_add_mac_suffix: false
  project:
    name: zuidwijk.slimmelezer
    version: "1.2"
  on_boot:
    then:
      - if:
          condition:
            lambda: return id(has_key);
          then:
            - lambda: |-
                std::string key(id(stored_decryption_key), 32);
                id(dsmr_instance).set_decryption_key(key);
          else:
            - logger.log:
                level: info
                format: "Not using decryption key. If you need to set a key use Home Assistant service 'ESPHome:  ${device_name}_set_dsmr_key'"

wifi:
  # remove leading '#' and fill in your wifi details
#  ssid: !secret wifi_ssid 
#  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: ${device_name}

captive_portal:

# Enable logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  services:
    service: set_dsmr_key
    variables:
      private_key: string
    then:
      - logger.log:
          format: Setting private key %s. Set to empty string to disable
          args: [private_key.c_str()]
      - globals.set:
          id: has_key
          value: !lambda "return private_key.length() == 32;"
      - lambda: |-
          if (private_key.length() == 32)
            private_key.copy(id(stored_decryption_key), 32);
          id(dsmr_instance).set_decryption_key(private_key);

ota:

dashboard_import:
  package_import_url: github://zuidwijk/dsmr/slimmelezer.yaml@main
  import_full_config: true

web_server:
  port: 80


globals:
  - id: has_key
    type: bool
    restore_value: yes
    initial_value: "false"
  - id: stored_decryption_key
    type: char[32]
    restore_value: yes

uart:
  rx_pin: D7
  baud_rate: 115200
  rx_buffer_size: 3000
  # debug:
  #  direction: RX
  #  after:
  #    delimiter: "\r\n"
  #  sequence:
  #   - lambda: UARTDebug::log_string(direction, bytes);

dsmr:
  id: dsmr_instance
  crc_check: false
  max_telegram_length: 3000
  receive_timeout: 200ms

captive_portal:

sensor:
  - platform: dsmr
    energy_delivered:
      name: "Hatásos import energia (+A)"
    energy_delivered_tariff1:
      name: "Hatásos import energia (+A) tarifa 1"
    energy_delivered_tariff2:
      name: "Hatásos import energia (+A) tarifa 2"

    power_delivered:
      name: "Pillanatnyi import teljesítmény (+A)"
      accuracy_decimals: 3
  
    electricity_tariff:
      name: "Aktuális tarifa"
    frequency:
      name: "Frekvencia"
    energy_absolute:
      name: "${device_friendly_name} Absolute active energy"
 
    voltage_l1:
      name: "Pillanatnyi fázis feszültség L1"
    voltage_l2:
      name: "Pillanatnyi fázis feszültség L2"
    voltage_l3:
      name: "Pillanatnyi fázis feszültség L3"
    current_l1:
      name: "Pillanatnyi áram L1"
      accuracy_decimals: 3
    current_l2:
      name: "Pillanatnyi áram L2"
      accuracy_decimals: 3
    current_l3:
      name: "Pillanatnyi áram L3"
      accuracy_decimals: 3

    instantaneous_power_factor:
      name: "Pillanatnyi teljesítmény tényező"
      device_class: power_factor
    instantaneous_power_factor_l1:
      name: "Pillanatnyi teljesítmény tényező L1"
      device_class: power_factor
    instantaneous_power_factor_l2:
      name: "Pillanatnyi teljesítmény tényező L2"
      device_class: power_factor
    instantaneous_power_factor_l3:
      name: "Pillanatnyi teljesítmény tényező L3"
      device_class: power_factor
    
    reactive_power_qi:
      name: "Pillanatnyi meddő teljesítmény (QI)"
      device_class: reactive_power

    # Napelemnél értelmezhető (vesz)
    #reactive_power_qii:
    #  name: "Pillanatnyi meddő teljesítmény (QII)"
    #  device_class: reactive_power

    # Napelemnél értelmezhető (vesz)
    #reactive_power_qiii:
    #  name: "Pillanatnyi meddő teljesítmény (QIII)"
    #  device_class: reactive_power


    reactive_power_qiv:
      name: "Pillanatnyi meddő teljesítmény (QIV)"


    reactive_power_delivered:
      name: "Import meddő energia (+R)"


    reactive_energy_qi:
      name: "Meddő energia (QI)"

    # Napelemnél értelmezhető (vesz)
    #reactive_energy_qii:
    #  name: "Meddő energia (QII)"

    # Napelemnél értelmezhető (vesz)
    #reactive_energy_qiii:
    #  name: "Meddő energia (QIII)"

    reactive_energy_qiv:
      name: "Meddő energia (QIV)"

    #Előrefizetős óráknál értelmezhető csak, nincs értelme egyébként használni
    #electricity_threshold:
    #  name: "Limiter határérték"
    
  
 
  - platform: uptime
    name: "SlimmeLezer Üzemidő"
    device_class: duration
  - platform: wifi_signal
    name: "SlimmeLezer Wi-Fi jel"
    update_interval: 60s

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "SlimmeLezer IP"
      update_interval: 60s
    ssid:
      name: "SlimmeLezer Wi-Fi SSID"
      update_interval: 60s
    bssid:
      name: "SlimmeLezer Wi-Fi BSSID"
      update_interval: 60s
 
  - platform: dsmr
    #identification:
    #  name: "COSEM logikai készüléknév"
    #equipment_id:
    #  name: "Mérő gyáriszám"
    breaker_status:
      name: "Megszakító státusz"
 
  - platform: version
    name: "ESPHome verzió és build"
    hide_timestamp: false
